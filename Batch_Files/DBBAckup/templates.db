{"templateName":"SP Select Search List","code":"SP_SELECTSEARCHLIST_TEMPL","templateContent":"-- =============================================\n-- Author:\t\t{{:author}}\n-- Create date: \n-- Description:\tSelects a list of all {{:TableName}} for the search criteria\n-- =============================================\nCREATE PROCEDURE [dbo].[Get{{:TableName}}ListSearch]\n(\n\t@SearchValue Varchar(500)\n)\nAS\nBEGIN\n\tSET NOCOUNT ON;\n\n\tSET @SearchValue = ISNULL(@SearchValue, '')\n\n\tSELECT\n        {{:IdentityColumn}},\n\t\t{{for Columns}}{{:ColumnName}}{{:LineEnding}}\n        {{/for}}\n\tFROM\n        {{:TableName}}\n\tWHERE\n\t\t(\n\t\t\tReferenceDescription Like '%' + @SearchValue + '%'\n\t\t)\n\tORDER BY\n\t\tReferenceDescription\nEND","_id":"02X8ylBe9EygQLds"}
{"templateName":"SP Select Details","code":"SP_SELECTDETAILS_TEMPL","templateContent":"-- =============================================\n-- Author:\t\t{{:author}}\n-- Create date: \n-- Description:\tSelects the details for the specified {{:TableName}}\n-- =============================================\nCREATE PROCEDURE [dbo].[Get{{:TableName}}Details]\n(\n\t@{{:IdentityColumn}} {{:IdentitySQLDatType}}\n)\nAS\nBEGIN\n\tSET NOCOUNT ON;\n\n\tSELECT\n        {{:IdentityColumn}},\n        {{for Columns}}{{:ColumnName}}{{:LineEnding}}\n        {{/for}}\n\tFROM\n        {{:TableName}}\n\tWHERE\n\t\t{{:IdentityColumn}} = @{{:IdentityColumn}}\nEND","_id":"5Z10F7Kf6b8O9f75"}
{"templateName":"SP Insert Update","code":"SP_INSERTUPDATE_TEMPL","templateContent":"-- =============================================\n-- Author:\t\t{{:author}}\n-- Create date: \n-- Description:\tInserts or updates a {{:TableName}}\n-- =============================================\nCREATE PROCEDURE [dbo].[AddUpdate{{:TableName}}]\n(\n@{{:IdentityColumn}} {{:IdentitySQLDatType}},\n{{for Columns}}@{{:ColumnName}} {{:SQLDatType}},\n{{/for}}@{{:IdentityColumn}}Out {{:IdentitySQLDatType}} Output\n)\nAS\nBEGIN\n\tSET NOCOUNT ON;\n\n--Check to insert\nIF(@{{:IdentityColumn}} = 0)\nBEGIN\n\t\t\nINSERT INTO [dbo].[{{:TableName}}]\n(\n    {{for Columns}}[{{:ColumnName}}]{{:LineEnding}}\n    {{/for}}\n)\nVALUES \n(\n    {{for Columns}}@{{:ColumnName}}{{:LineEnding}}\n    {{/for}}\n)\n\nSET @{{:IdentityColumn}}Out = SCOPE_IDENTITY()\n\nEND\nELSE\nBEGIN\n\t\t\nUPDATE [dbo].[{{:TableName}}]\nSET \n    {{for Columns}}[{{:ColumnName}}] = @{{:ColumnName}}{{:LineEnding}}\n    {{/for}}\nWHERE\n    {{:IdentityColumn}} = @{{:IdentityColumn}}\n\nSET @{{:IdentityColumn}}Out = @{{:IdentityColumn}}\nEND\nEND","_id":"MMOHUzrVl2OQfTwE"}
{"templateName":"C# Class Template","code":"CCLASS_TEMPL","templateContent":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Data;\nusing System.Data.SqlClient;\nusing KooBoo.Framework;\nusing KooBoo.Framework.Data;\n\nnamespace {{:namespace}}\n{{:\"{\"}}\n    public class {{:TableName}} {{if exportBase}}: {{:baseClass}}{{/if}}\n    {{:\"{\"}}\n        #region Properties\n\n        {{for Columns}}public {{:DataType}} {{:ColumnName}} {{:\"{\"}} get; set; {{:\"}\"}} \n        {{/for}}\n        #endregion\n\n        #region Select Methods\n                    \n        {{:\"/// <summary>\"}}\n        {{:\"/// Selects the details for the specified\"}}{{:TableName}}\n        {{:\"/// </summary>\"}}\n        {{:\"/// <returns></returns>\"}}\n        public void GetDetails()\n        {{:\"{\"}}\n\t\t\ttry\n            {{:\"{\"}}\n\t\t\t\tDataTable dt = sqlManager.ExcecuteDataTable(\"Get{{:TableName}}Details\", CommandType.StoredProcedure, new List<SqlParameter>() {{:\"{\"}} \n\t\t\t\t\tSQL.SQLParameter(\"{{:IdentityColumn}}\", {{:IdentityEnumType}}, {{:IdentityColumn}})\n\t\t\t\t{{:\"}\"}});\n\n\t\t\t\tif (dt.Rows.Count > 0)\n\t\t\t\t{{:\"{\"}}\n\t\t\t\t\t{{for Columns}}{{:ColumnName}} = dt.GetDataCellValue(0, \"{{:ColumnName}}\"){{if IsIntColumn}}.ToInt32(){{/if}};\n\t\t\t\t\t{{/for}}\n\t\t\t\t{{:\"}\"}}\n\t\t\t{{:\"}\"}}\n            catch (Exception ex)\n            {{:\"{\"}}\n                LogError(ex.Message, ex, \"{{:namespace}}.{{:TableName}}.Get{{:TableName}}Details\");\n            {{:\"}\"}}\n            finally\n            {{:\"{\"}}\n                sqlManager.CloseConnectionNoTransaction();\n            {{:\"}\"}}\n        {{:\"}\"}}\n\n        {{:\"/// <summary>\"}}\n        {{:\"/// Selects a list of all \"}}{{:TableName}} {{:\"for the search criteria\"}}\n        {{:\"/// </summary>\"}}\n        {{:\"/// <returns></returns>\"}}\n        public List{{:\"<\"}}{{:TableName}}{{:\">\"}} GetListSearch(string searchValue)\n        {{:\"{\"}}\n            List{{:\"<\"}}{{:TableName}}{{:\">\"}} list = new List{{:\"<\"}}{{:TableName}}{{:\">\"}}();\n\n\t\t\ttry\n            {{:\"{\"}}\n\t\t\t\tDataTable dt = sqlManager.ExcecuteDataTable(\"Get{{:TableName}}ListSearch\", CommandType.StoredProcedure, new List<SqlParameter>() {{:\"{\"}} \n\t\t\t\t\tSQL.SQLParameter(\"SearchValue\", SqlDbType.VarChar, searchValue)\n\t\t\t\t{{:\"}\"}});\n\n\t\t\t\tif (dt.Rows.Count > 0)\n\t\t\t\t{{:\"{\"}}\n\t\t\t\t\tlist = (from d in dt.AsEnumerable()\n\t\t\t\t\t\t\tselect new {{:TableName}}\n\t\t\t\t\t\t\t{{:\"{\"}}\n\t\t\t\t\t\t\t\t{{for Columns}}{{:ColumnName}} = d.Field{{:\"<\"}}{{:DataType}}{{:\">\"}}(\"{{:ColumnName}}\"),\n\t\t\t\t\t\t\t\t{{/for}}\n\t\t\t\t\t\t\t{{:\"}\"}}).ToList{{:\"<\"}}{{:TableName}}{{:\">\"}}();\n\t\t\t\t{{:\"}\"}}\n\t\t\t{{:\"}\"}}\n            catch (Exception ex)\n            {{:\"{\"}}\n                LogError(ex.Message, ex, \"{{:namespace}}.{{:TableName}}.Get{{:TableName}}ListSearch\");\n            {{:\"}\"}}\n            finally\n            {{:\"{\"}}\n                sqlManager.CloseConnectionNoTransaction();\n            {{:\"}\"}}\n\n            return list;\n        {{:\"}\"}}\n\n        #endregion\n\n        #region Insert Update Methods\n\n        {{:\"/// <summary>\"}}\n        {{:\"/// Inserts or updates the specified \"}}{{:TableName}}\n        {{:\"/// </summary>\"}}\n        public void AddUpdate()\n        {{:\"{\"}}\n\t\t\ttry\n            {{:\"{\"}}\n\t\t\t\tsqlManager.ExcecuteNonQuery(\"AddUpdate{{:TableName}}\", CommandType.StoredProcedure, new List<SqlParameter>()\n\t\t\t\t{{:\"{\"}} \n\t\t\t\t\t{{for Columns}}SQL.SQLParameter(\"{{:ColumnName}}\", {{:EnumDataType}}, {{:ColumnName}}),\n\t\t\t\t\t{{/for}}SQL.SQLParameter(\"{{:IdentityColumn}}Out\", {{:IdentityEnumType}}, 4, ParameterDirection.Output)\n\t\t\t\t{{:\"}\"}});\n\n\t\t\t\t//Set output values\n\t\t\t\tif (sqlManager.CurrentCommand != null)\n\t\t\t\t{{:\"{\"}}\n\t\t\t\t\tif (sqlManager.CurrentCommand.Parameters[\"{{:IdentityColumn}}Out\"].Value != DBNull.Value)\n\t\t\t\t\t{{:\"{\"}}\n\t\t\t\t\t\t{{:IdentityColumn}} = ({{:IdentityType}})sqlManager.CurrentCommand.Parameters[\"{{:IdentityColumn}}Out\"].Value;\n\t\t\t\t\t{{:\"}\"}}\n\t\t\t\t{{:\"}\"}}\n\t\t\t{{:\"}\"}}\n            catch (Exception ex)\n            {{:\"{\"}}\n                LogError(ex.Message, ex, \"{{:namespace}}.{{:TableName}}.AddUpdate{{:TableName}}\");\n            {{:\"}\"}}\n            finally\n            {{:\"{\"}}\n                sqlManager.CloseConnectionNoTransaction();\n            {{:\"}\"}}\n        {{:\"}\"}}\n\n        #endregion\n\n        #region Delete Methods\n\n        {{:\"/// <summary>\"}}\n        {{:\"/// Deletes the specified \"}}{{:TableName}}\n        {{:\"/// </summary>\"}}\n        public void Delete()\n        {{:\"{\"}}\n\t\t\ttry\n            {{:\"{\"}}\n\t\t\t\tsqlManager.ExcecuteNonQuery(\"Delete{{:TableName}}\", CommandType.StoredProcedure, new List<SqlParameter>() {{:\"{\"}} \n\t\t\t\t\tSQL.SQLParameter(\"{{:IdentityColumn}}\", {{:IdentityEnumType}}, {{:IdentityColumn}})\n\t\t\t\t{{:\"}\"}});\n\t\t\t{{:\"}\"}}\n            catch (Exception ex)\n            {{:\"{\"}}\n                LogError(ex.Message, ex, \"{{:namespace}}.{{:TableName}}.Delete{{:TableName}}\");\n            {{:\"}\"}}\n            finally\n            {{:\"{\"}}\n                sqlManager.CloseConnectionNoTransaction();\n            {{:\"}\"}}\n        {{:\"}\"}}\n\n        #endregion\n    {{:\"}\"}}\n{{:\"}\"}}","_id":"hOKN25a7r4NkGE2K"}
{"templateName":"C# Base Class Template","code":"CBASE_CLASS_TEMPL","templateContent":"using KooBoo.Framework.Data;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace {{:namespace}}\n{{:\"{\"}}\n    public abstract class {{:baseClass}}\n    {{:\"{\"}}\n        internal SqlDataManager sqlManager;\n\t\t\n\tpublic Error error {{:\"{\"}} get; set; {{:\"}\"}}\n        public string IPAddress {{:\"{\"}} get; set; {{:\"}\"}}\n        public string OperatingSystem {{:\"{\"}} get; set; {{:\"}\"}}\n        public string BrowserType {{:\"{\"}} get; set; {{:\"}\"}}\n        public string BrowserVersion {{:\"{\"}} get; set; {{:\"}\"}}\n        public string ScreenResulotion {{:\"{\"}} get; set; {{:\"}\"}}\n        public string Logger {{:\"{\"}} get; set; {{:\"}\"}}\n\n        public {{:baseClass}}()\n        {{:\"{\"}}\n            sqlManager = new SqlDataManager(\"DBConnection1\", null);\n            error = new Error();\n        {{:\"}\"}}\n\t\t\n\t\tpublic async Task<LogAction> LogError(string message, Exception exception, string logger)\n        {{:\"{\"}}\n            LogAction logAction = new LogAction();\n\n            try\n            {{:\"{\"}}\n                error.Message = message;\n                error.IsError = true;\n\n                if (IPAddress == null) {{:\"{\"}} IPAddress = \"\"; {{:\"}\"}}\n                if (OperatingSystem == null) {{:\"{\"}} OperatingSystem = \"\"; {{:\"}\"}}\n                if (BrowserType == null) {{:\"{\"}} BrowserType = \"\"; {{:\"}\"}}\n                if (BrowserVersion == null) {{:\"{\"}} BrowserVersion = \"\"; {{:\"}\"}}\n                if (ScreenResulotion == null) {{:\"{\"}} ScreenResulotion = \"\"; {{:\"}\"}}\n\n                logAction.IPAddress = IPAddress;\n                logAction.OperatingSystem = OperatingSystem;\n                logAction.BrowserType = BrowserType;\n                logAction.BrowserVersion = BrowserVersion;\n                logAction.ScreenResulotion = ScreenResulotion;\n                logAction.Logger = logger;\n                logAction.Level = EntireXResponseCode.UnexpectedTechnicalError.ToString();\n                logAction.Message = exception.Message;\n                logAction.Exception = exception.ToString();\n                await logAction.Add(NotificationType.Error);\n\n            {{:\"}\"}}\n            catch\n            {{:\"{\"}}\n                throw;\n            {{:\"}\"}}\n\n            return logAction;\n        {{:\"}\"}}\n\t\t\n\t\tpublic async Task LogSucessAction(string message, string logger)\n        {{:\"{\"}}\n            LogAction _logAction = new LogAction();\n            \n            try\n            {{:\"{\"}}\n                error.Message = message;\n                error.IsError = false;\n\n                _logAction.IPAddress = IPAddress;\n                _logAction.OperatingSystem = OperatingSystem;\n                _logAction.BrowserType = BrowserType;\n                _logAction.BrowserVersion = BrowserVersion;\n                _logAction.ScreenResulotion = ScreenResulotion;\n                _logAction.Level = EntireXResponseCode.Success.ToString();\n                _logAction.Logger = logger;\n                _logAction.Message = message;\n                _logAction.Exception = \"\";\n                await _logAction.Add(NotificationType.Success);\n            {{:\"}\"}}\n            catch\n            {{:\"{\"}}\n                throw;\n            {{:\"}\"}}\n            finally\n            {{:\"{\"}}\n                _logAction = null;\n            {{:\"}\"}}\n        {{:\"}\"}}\n\t\t\n\t\tpublic async Task LogWarningAction(string message, string logger)\n        {{:\"{\"}}\n            LogAction _logAction = new LogAction();\n            \n            try\n            {{:\"{\"}}\n                error.Message = message;\n                error.IsError = true;\n\n                _logAction.IPAddress = IPAddress;\n                _logAction.OperatingSystem = OperatingSystem;\n                _logAction.BrowserType = BrowserType;\n                _logAction.BrowserVersion = BrowserVersion;\n                _logAction.ScreenResulotion = ScreenResulotion;\n                _logAction.Level = EntireXResponseCode.SuccessWithWarning.ToString();\n                _logAction.Logger = logger;\n                _logAction.Message = message;\n                await _logAction.Add(NotificationType.Warning);\n            {{:\"}\"}}\n            catch\n            {{:\"{\"}}\n                throw;\n            {{:\"}\"}}\n            finally\n            {{:\"{\"}}\n                _logAction = null;\n            {{:\"}\"}}\n        {{:\"}\"}}\n    {{:\"}\"}}\n{{:\"}\"}}","_id":"mU7sAWK1qUYyjE5j"}
